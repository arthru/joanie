# Generated by Django 4.0.8 on 2023-01-19 15:54

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import joanie.jenny.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('core', '0002_remove_organization_representative_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='primary key for the record as UUID', primary_key=True, serialize=False, verbose_name='id')),
                ('created_on', models.DateTimeField(auto_now_add=True, help_text='date and time at which a record was created', verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, help_text='date and time at which a record was last updated', verbose_name='updated on')),
                ('start', models.DateField(verbose_name='start of the contract')),
                ('end', models.DateField(blank=True, default=None, null=True, verbose_name='end of the contract')),
                ('file', models.FileField(upload_to=joanie.jenny.models.contract_upload_to, verbose_name='file of the signed contract')),
                ('organization', models.ForeignKey(help_text='the organization signing the contract', on_delete=django.db.models.deletion.PROTECT, to='core.organization', verbose_name='organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='primary key for the record as UUID', primary_key=True, serialize=False, verbose_name='id')),
                ('created_on', models.DateTimeField(auto_now_add=True, help_text='date and time at which a record was created', verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, help_text='date and time at which a record was last updated', verbose_name='updated on')),
                ('pep_number', models.CharField(max_length=255, verbose_name='Quote number in PEP')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.organization', verbose_name='Organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PreCourse',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='primary key for the record as UUID', primary_key=True, serialize=False, verbose_name='id')),
                ('created_on', models.DateTimeField(auto_now_add=True, help_text='date and time at which a record was created', verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, help_text='date and time at which a record was last updated', verbose_name='updated on')),
                ('submission_date', models.DateField(verbose_name='Submission date')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('status', models.CharField(blank=True, choices=[('STANDARD', 'Standard'), ('MOOC_FOLIO', 'MOOC folio'), ('OPEN_ARCHIVE', 'Archiv√© ouvert'), ('SELF_PACED', 'Self-paced'), ('THEME_PROJECT_INSTANCE', 'Instance projet-theme')], default='STANDARD', max_length=22, verbose_name='Status')),
                ('session', models.PositiveIntegerField(verbose_name='Session')),
                ('diffusion', models.PositiveIntegerField(blank=True, null=True, verbose_name='Diffusion')),
                ('enrollment_start_date', models.DateField(verbose_name='Enrollment opening')),
                ('course_start_date', models.DateField(verbose_name='Course start date')),
                ('course_end_date', models.DateField(blank=True, null=True, verbose_name='Course end date')),
                ('enrollment_end_date', models.DateField(blank=True, null=True, verbose_name='Enrollment closing')),
                ('kind', models.CharField(choices=[('MOOC', 'MOOC'), ('SPOCA', 'Academic SPOC'), ('SPOCC', 'Corporate SPOC')], default=None, max_length=5, null=True, verbose_name='Kind')),
                ('student_number', models.PositiveIntegerField(blank=True, null=True, verbose_name='Student number')),
                ('plaform', models.CharField(choices=[('FUN_CAMPUS', 'FUN-CAMPUS'), ('FUN_CORPORATE', 'FUN-CORPORATE'), ('FUN_MOOC', 'FUN-MOOC')], max_length=13, verbose_name='Plaform')),
                ('membership_level', models.CharField(choices=[('LEVEL1', 'N1 - member level 1 subscription'), ('LEVEL2', 'N2 - member level 2 subscription'), ('LEVEL3', 'N3 - member level 3 subscription'), ('NON_PROFIT_PARTNER', 'PA - non-profit partner'), ('FOR_PROFIT_PARTNER', 'PP - for-profit partner'), ('PARTNER_BEYOND_QUOTA', 'PHQ - partner beyond quota'), ('MEMBER_BEYOND_QUOTA', 'NHQ - Member beyond quota (ex. State)'), ('THEME_PROJECT', 'Theme project'), ('IRRELEVANT', 'Irrelevant')], max_length=20, verbose_name='Plaform')),
                ('double_display', models.BooleanField(default=False, verbose_name='Double display')),
                ('summary', models.TextField(verbose_name='Summary')),
                ('contacts', models.TextField(verbose_name='Contacts')),
                ('email_addresses', models.TextField(verbose_name='Email addresses')),
                ('phone_numbers', models.TextField(verbose_name='Phone numbers')),
                ('week_duration', models.PositiveIntegerField(blank=True, help_text='Duration of the course in week(s)', null=True, verbose_name='Week duration')),
                ('estimated_weekly_hours', models.PositiveIntegerField(blank=True, help_text='The number of hour a student will need to work weekly', null=True, verbose_name='Estimated weekly hours')),
                ('comment', models.TextField(verbose_name='Comment')),
                ('attestation', models.BooleanField(null=True, verbose_name='Attestation')),
                ('test_attestation', models.CharField(blank=True, default='', max_length=255, verbose_name='Test attestation')),
                ('estimated_attestation_generation_date', models.DateField(blank=True, help_text='The estimated date at which the attestation will be generated', null=True, verbose_name='Estimated attestation generation date')),
                ('attestation_generation_date', models.DateField(blank=True, help_text='The date at which the attestation will be generated', null=True, verbose_name='Attestation generation date')),
                ('attestation_comment', models.TextField(verbose_name='Attestation comment')),
                ('delivered_attestation_quantity', models.PositiveIntegerField(blank=True, null=True, verbose_name='Delivered attestation quantity')),
                ('registered_quantity', models.PositiveIntegerField(blank=True, null=True, verbose_name='Registered quantity')),
                ('certificate', models.BooleanField(null=True, verbose_name='Certificate')),
                ('certificate_type', models.CharField(choices=[('IN_PERSON', 'In person'), ('REMOTLY', 'Remote observation'), ('SUBMISSION', 'Project submission')], max_length=10, verbose_name='Certificate type')),
                ('exam_start_date', models.DateField(blank=True, null=True, verbose_name='Exam start date')),
                ('exam_end_date', models.DateField(blank=True, null=True, verbose_name='Exam end date')),
                ('payment_start_date', models.DateField(blank=True, null=True, verbose_name='Payment start date')),
                ('payment_end_date', models.DateField(blank=True, null=True, verbose_name='Payment end date')),
                ('exam_duration', models.DurationField(blank=True, null=True, verbose_name='Exam duration')),
                ('exam_price', models.PositiveIntegerField(blank=True, null=True, verbose_name='Exam price')),
                ('certificate_generation_date', models.DateField(blank=True, null=True, verbose_name='Certificate generation date')),
                ('delivered_certificate_quantity', models.PositiveIntegerField(blank=True, null=True, verbose_name='Delivered certificate quantity')),
                ('exam_url', models.URLField(blank=True, null=True, verbose_name='Exam URL')),
                ('certificate_comment', models.TextField(verbose_name='Certificate comment')),
                ('invoicing', models.TextField(verbose_name='Invoicing')),
                ('invoice_reference', models.CharField(blank=True, default='', max_length=255, verbose_name='Invoice reference')),
                ('invoicing_comment', models.TextField(verbose_name='Invoicing comment')),
                ('cohort_invoicing', models.CharField(blank=True, default='', max_length=255, verbose_name='Cohort invoicing')),
                ('member_invoicing', models.CharField(blank=True, default='', max_length=255, verbose_name='Member invoicing')),
                ('partner_invoicing', models.CharField(blank=True, default='', max_length=255, verbose_name='Partner invoicing')),
                ('invoicing_year', models.PositiveIntegerField(blank=True, null=True, verbose_name='Invoicing year')),
                ('attestation_teachers', models.ManyToManyField(blank=True, related_name='attestation_teacher_precourses', to=settings.AUTH_USER_MODEL, verbose_name='Attestation teachers')),
                ('manager', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pre_courses', to=settings.AUTH_USER_MODEL, verbose_name='Manager')),
                ('organization_lead', models.ForeignKey(blank=True, help_text='the organization leading the course', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='pre_courses_as_lead', to='core.organization', verbose_name='Organization lead')),
                ('organization_member', models.ForeignKey(blank=True, help_text='the organization with membership', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='pre_courses_as_member', to='core.organization', verbose_name='Organization memeber')),
                ('organization_producer', models.ForeignKey(blank=True, help_text='the organization giving the course', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='pre_courses_as_producer', to='core.organization', verbose_name='Organization producer')),
                ('secondary_organization', models.ForeignKey(blank=True, help_text='the second organization to display if double display is needed', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.organization', verbose_name='Secondary organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Pricing',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='primary key for the record as UUID', primary_key=True, serialize=False, verbose_name='id')),
                ('created_on', models.DateTimeField(auto_now_add=True, help_text='date and time at which a record was created', verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, help_text='date and time at which a record was last updated', verbose_name='updated on')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('level', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Level')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price')),
                ('year', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(2023)], verbose_name='Year')),
                ('course_quantity', models.PositiveSmallIntegerField(verbose_name='Course quantity')),
                ('double_display_included', models.BooleanField(verbose_name='Double display included')),
                ('double_display_unit_price', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Double display unit price')),
                ('course_over_unit_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Out of package course unit price')),
                ('course_archived_open_unit_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Out of package archived open course unit price')),
                ('campus_new_unit_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Campus new course unit price')),
                ('campus_learner_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Campus unit price by learner')),
                ('fpc_fun_percent', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='FUN percentage on Continuous Professionnal Formation')),
                ('fpc_fun_mini', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='FPC minimum price')),
                ('fpc_certificate', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='FPC price by certificate')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Quote',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='primary key for the record as UUID', primary_key=True, serialize=False, verbose_name='id')),
                ('created_on', models.DateTimeField(auto_now_add=True, help_text='date and time at which a record was created', verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, help_text='date and time at which a record was last updated', verbose_name='updated on')),
                ('pep_number', models.CharField(max_length=255, verbose_name='Quote number in PEP')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.organization', verbose_name='Organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='primary key for the record as UUID', primary_key=True, serialize=False, verbose_name='id')),
                ('created_on', models.DateTimeField(auto_now_add=True, help_text='date and time at which a record was created', verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, help_text='date and time at which a record was last updated', verbose_name='updated on')),
                ('debit', models.PositiveIntegerField(verbose_name='Debit')),
                ('credit', models.PositiveIntegerField(verbose_name='Credit')),
                ('contract', models.ForeignKey(help_text='source of credit', on_delete=django.db.models.deletion.CASCADE, to='jenny.contract', verbose_name='contract')),
                ('precourse', models.ForeignKey(help_text='source of debit', on_delete=django.db.models.deletion.PROTECT, to='jenny.precourse', verbose_name='precours')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuoteLine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='primary key for the record as UUID', primary_key=True, serialize=False, verbose_name='id')),
                ('created_on', models.DateTimeField(auto_now_add=True, help_text='date and time at which a record was created', verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, help_text='date and time at which a record was last updated', verbose_name='updated on')),
                ('label', models.TextField(verbose_name='Label')),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Unit price')),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Quantity')),
                ('quote', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='jenny.quote', verbose_name='Organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PricingFPCbyOrg',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='primary key for the record as UUID', primary_key=True, serialize=False, verbose_name='id')),
                ('created_on', models.DateTimeField(auto_now_add=True, help_text='date and time at which a record was created', verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, help_text='date and time at which a record was last updated', verbose_name='updated on')),
                ('range_start', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Range start')),
                ('range_end', models.PositiveSmallIntegerField(blank=True, default=None, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Range end')),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price by learner')),
                ('minimum', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Range minimum price')),
                ('pricing', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='jenny.pricing', verbose_name='Pricing')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InvoiceLine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='primary key for the record as UUID', primary_key=True, serialize=False, verbose_name='id')),
                ('created_on', models.DateTimeField(auto_now_add=True, help_text='date and time at which a record was created', verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, help_text='date and time at which a record was last updated', verbose_name='updated on')),
                ('label', models.TextField(verbose_name='Label')),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Unit price')),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Quantity')),
                ('quote', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='jenny.invoice', verbose_name='Organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='contract',
            name='pricing',
            field=models.ForeignKey(help_text='the pricing to apply with this contract', on_delete=django.db.models.deletion.PROTECT, to='jenny.pricing', verbose_name='Pricing'),
        ),
    ]
